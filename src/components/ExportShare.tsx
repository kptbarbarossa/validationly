import React, { useState } from 'react';
import { Button } from './LoadingStates';

interface ExportShareProps {
  validation: {
    idea: string;
    demandScore: number;
    scoreJustification: string;
    classification: any;
    insights: any;
    socialMediaSuggestions: any;
  };
  className?: string;
}

export const ExportShare: React.FC<ExportShareProps> = ({ validation, className = '' }) => {
  const [copied, setCopied] = useState(false);
  const [exportFormat, setExportFormat] = useState<'json' | 'pdf' | 'markdown'>('json');

  const generateShareableLink = () => {
    const baseUrl = window.location.origin;
    const encodedIdea = encodeURIComponent(validation.idea);
    return `${baseUrl}/?idea=${encodedIdea}`;
  };

  const generateMarkdownReport = () => {
    return `# Validation Report

## Idea
${validation.idea}

## Validation Score
**${validation.demandScore}/100**

## Justification
${validation.scoreJustification}

## Classification
- **Category**: ${validation.classification?.primaryCategory || 'N/A'}
- **Business Model**: ${validation.classification?.businessModel || 'N/A'}
- **Target Market**: ${validation.classification?.targetMarket || 'N/A'}
- **Complexity**: ${validation.classification?.complexity || 'N/A'}

## Key Insights
${validation.insights?.keyInsights?.map((insight: string, i: number) => `${i + 1}. ${insight}`).join('\n') || 'No insights available'}

## Opportunities
${validation.insights?.opportunities?.map((opp: string, i: number) => `${i + 1}. ${opp}`).join('\n') || 'No opportunities identified'}

## Pain Points
${validation.insights?.painPoints?.map((pain: string, i: number) => `${i + 1}. ${pain}`).join('\n') || 'No pain points identified'}

## Social Media Suggestions

### Twitter/X
${validation.socialMediaSuggestions?.tweetSuggestion || 'No suggestion available'}

### LinkedIn
${validation.socialMediaSuggestions?.linkedinSuggestion || 'No suggestion available'}

### Reddit
**Title**: ${validation.socialMediaSuggestions?.redditTitleSuggestion || 'No title suggestion'}

**Body**: ${validation.socialMediaSuggestions?.redditBodySuggestion || 'No body suggestion'}

---
*Generated by Validationly - ${new Date().toLocaleDateString()}*
`;
  };

  const generateJSONReport = () => {
    return JSON.stringify({
      ...validation,
      generatedAt: new Date().toISOString(),
      generatedBy: 'Validationly'
    }, null, 2);
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Failed to copy to clipboard:', error);
    }
  };

  const downloadFile = (content: string, filename: string, mimeType: string) => {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleExport = () => {
    const timestamp = new Date().toISOString().split('T')[0];
    const safeIdeaName = validation.idea.slice(0, 30).replace(/[^a-zA-Z0-9]/g, '_');
    
    switch (exportFormat) {
      case 'json':
        downloadFile(
          generateJSONReport(),
          `validation_${safeIdeaName}_${timestamp}.json`,
          'application/json'
        );
        break;
      case 'markdown':
        downloadFile(
          generateMarkdownReport(),
          `validation_${safeIdeaName}_${timestamp}.md`,
          'text/markdown'
        );
        break;
      case 'pdf':
        // For PDF, we'll use the browser's print functionality
        const printWindow = window.open('', '_blank');
        if (printWindow) {
          printWindow.document.write(`
            <html>
              <head>
                <title>Validation Report</title>
                <style>
                  body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
                  h1, h2, h3 { color: #333; }
                  .score { font-size: 24px; font-weight: bold; color: #4f46e5; }
                  .section { margin: 20px 0; }
                  .list-item { margin: 5px 0; }
                  @media print { body { margin: 20px; } }
                </style>
              </head>
              <body>
                <h1>Validation Report</h1>
                <div class="section">
                  <h2>Idea</h2>
                  <p>${validation.idea}</p>
                </div>
                <div class="section">
                  <h2>Validation Score</h2>
                  <div class="score">${validation.demandScore}/100</div>
                </div>
                <div class="section">
                  <h2>Justification</h2>
                  <p>${validation.scoreJustification}</p>
                </div>
                <div class="section">
                  <h2>Key Insights</h2>
                  ${validation.insights?.keyInsights?.map((insight: string) => `<div class="list-item">â€¢ ${insight}</div>`).join('') || '<p>No insights available</p>'}
                </div>
                <div class="section">
                  <h2>Opportunities</h2>
                  ${validation.insights?.opportunities?.map((opp: string) => `<div class="list-item">â€¢ ${opp}</div>`).join('') || '<p>No opportunities identified</p>'}
                </div>
                <div class="section">
                  <h2>Pain Points</h2>
                  ${validation.insights?.painPoints?.map((pain: string) => `<div class="list-item">â€¢ ${pain}</div>`).join('') || '<p>No pain points identified</p>'}
                </div>
                <div class="section">
                  <small>Generated by Validationly on ${new Date().toLocaleDateString()}</small>
                </div>
              </body>
            </html>
          `);
          printWindow.document.close();
          printWindow.print();
        }
        break;
    }
  };

  const shareOnSocial = (platform: 'twitter' | 'linkedin' | 'reddit') => {
    const shareableLink = generateShareableLink();
    const text = `Just validated my startup idea "${validation.idea}" and got a ${validation.demandScore}/100 score! ðŸš€`;
    
    let url = '';
    switch (platform) {
      case 'twitter':
        url = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(shareableLink)}`;
        break;
      case 'linkedin':
        url = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(shareableLink)}`;
        break;
      case 'reddit':
        url = `https://reddit.com/submit?url=${encodeURIComponent(shareableLink)}&title=${encodeURIComponent(text)}`;
        break;
    }
    
    window.open(url, '_blank', 'width=600,height=400');
  };

  return (
    <div className={`space-y-6 ${className}`}>
      {/* Export Section */}
      <div className="bg-slate-800/50 border border-slate-700 rounded-xl p-6">
        <h3 className="text-lg font-semibold text-white mb-4 flex items-center">
          <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
          </svg>
          Export Report
        </h3>
        
        <div className="flex flex-col sm:flex-row gap-4 items-start sm:items-center">
          <select
            value={exportFormat}
            onChange={(e) => setExportFormat(e.target.value as any)}
            className="px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white focus:outline-none focus:border-indigo-500"
          >
            <option value="json">JSON Format</option>
            <option value="markdown">Markdown Report</option>
            <option value="pdf">PDF Report</option>
          </select>
          
          <Button variant="primary" onClick={handleExport}>
            <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
            </svg>
            Export {exportFormat.toUpperCase()}
          </Button>
        </div>
        
        <p className="text-sm text-slate-400 mt-2">
          {exportFormat === 'json' && 'Export raw data in JSON format for further analysis'}
          {exportFormat === 'markdown' && 'Generate a formatted markdown report'}
          {exportFormat === 'pdf' && 'Create a printable PDF report'}
        </p>
      </div>

      {/* Share Section */}
      <div className="bg-slate-800/50 border border-slate-700 rounded-xl p-6">
        <h3 className="text-lg font-semibold text-white mb-4 flex items-center">
          <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
          </svg>
          Share Results
        </h3>
        
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-3 mb-4">
          <Button
            variant="outline"
            onClick={() => shareOnSocial('twitter')}
            className="flex items-center justify-center"
          >
            <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
              <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
            </svg>
            Twitter
          </Button>
          
          <Button
            variant="outline"
            onClick={() => shareOnSocial('linkedin')}
            className="flex items-center justify-center"
          >
            <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
              <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
            </svg>
            LinkedIn
          </Button>
          
          <Button
            variant="outline"
            onClick={() => shareOnSocial('reddit')}
            className="flex items-center justify-center"
          >
            <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0zm5.01 4.744c.688 0 1.25.561 1.25 1.249a1.25 1.25 0 0 1-2.498.056l-2.597-.547-.8 3.747c1.824.07 3.48.632 4.674 1.488.308-.309.73-.491 1.207-.491.968 0 1.754.786 1.754 1.754 0 .716-.435 1.333-1.01 1.614a3.111 3.111 0 0 1 .042.52c0 2.694-3.13 4.87-7.004 4.87-3.874 0-7.004-2.176-7.004-4.87 0-.183.015-.366.043-.534A1.748 1.748 0 0 1 4.028 12c0-.968.786-1.754 1.754-1.754.463 0 .898.196 1.207.49 1.207-.883 2.878-1.43 4.744-1.487l.885-4.182a.342.342 0 0 1 .14-.197.35.35 0 0 1 .238-.042l2.906.617a1.214 1.214 0 0 1 1.108-.701zM9.25 12C8.561 12 8 12.562 8 13.25c0 .687.561 1.248 1.25 1.248.687 0 1.248-.561 1.248-1.249 0-.688-.561-1.249-1.249-1.249zm5.5 0c-.687 0-1.248.561-1.248 1.25 0 .687.561 1.248 1.249 1.248.688 0 1.249-.561 1.249-1.249 0-.687-.562-1.249-1.25-1.249zm-5.466 3.99a.327.327 0 0 0-.231.094.33.33 0 0 0 0 .463c.842.842 2.484.913 2.961.913.477 0 2.105-.056 2.961-.913a.361.361 0 0 0 .029-.463.33.33 0 0 0-.464 0c-.547.533-1.684.73-2.512.73-.828 0-1.979-.196-2.512-.73a.326.326 0 0 0-.232-.095z"/>
            </svg>
            Reddit
          </Button>
        </div>
        
        {/* Copy Link */}
        <div className="flex flex-col sm:flex-row gap-2">
          <input
            type="text"
            value={generateShareableLink()}
            readOnly
            className="flex-1 px-3 py-2 bg-slate-700 border border-slate-600 rounded-lg text-white text-sm"
          />
          <Button
            variant={copied ? 'secondary' : 'outline'}
            onClick={() => copyToClipboard(generateShareableLink())}
          >
            {copied ? (
              <>
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
                Copied!
              </>
            ) : (
              <>
                <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                </svg>
                Copy Link
              </>
            )}
          </Button>
        </div>
      </div>
    </div>
  );
};

export default ExportShare;