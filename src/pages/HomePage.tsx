
import React, { useState, useRef, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { validateIdea } from '../services/geminiService';
import type { ValidationResult, UserInput } from '../types';
import LoadingSpinner from '../components/LoadingSpinner';

const sampleIdeas = [
    "AI-powered meal planner for dietary restrictions",
    "A subscription box for rare, exotic houseplants",
    "Platform to connect local artists with cafes for wall art",
    "Personalized bedtime stories for kids generated by AI"
];

const MagnifyingGlassIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
        <path strokeLinecap="round" strokeLinejoin="round" d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z" />
    </svg>
);

const HomePage: React.FC = () => {
    const [userInput, setUserInput] = useState<UserInput>({
        idea: '',
        isValid: false
    });
    const [isLoading, setIsLoading] = useState(false);
    const navigate = useNavigate();
    const textareaRef = useRef<HTMLTextAreaElement>(null);

    useEffect(() => {
        textareaRef.current?.focus();
    }, []);

    const validateInput = (idea: string): UserInput => {
        const trimmedIdea = idea.trim();
        
        if (!trimmedIdea) {
            return { idea, isValid: false, errorMessage: 'Please enter an idea to validate.' };
        }
        
        if (trimmedIdea.length < 10) {
            return { idea, isValid: false, errorMessage: 'Idea must be at least 10 characters long.' };
        }
        
        if (trimmedIdea.length > 1000) {
            return { idea, isValid: false, errorMessage: 'Idea must be less than 1000 characters.' };
        }
        
        return { idea, isValid: true };
    };

    const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
        const newValue = e.target.value;
        const validation = validateInput(newValue);
        setUserInput(validation);
    };

    const triggerValidation = async () => {
        if (!userInput.isValid) {
            return;
        }

        setIsLoading(true);
        
        try {
            const result: ValidationResult = await validateIdea(userInput.idea);
            navigate('/results', { state: { result } });
        } catch (err) {
            if (err instanceof Error) {
                setUserInput(prev => ({
                    ...prev,
                    errorMessage: err.message
                }));
            } else {
                setUserInput(prev => ({
                    ...prev,
                    errorMessage: 'An unexpected error occurred. Please try again.'
                }));
            }
        } finally {
            setIsLoading(false);
        }
    };

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        triggerValidation();
    };

    const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            triggerValidation();
        }
    };

    const handleSampleIdeaClick = (sampleIdea: string) => {
        const validation = validateInput(sampleIdea);
        setUserInput(validation);
        textareaRef.current?.focus();
        window.scrollTo({ top: 0, behavior: 'smooth' });
    };

    return (
        <div className="text-center max-w-2xl mx-auto">
            <h1 className="text-4xl sm:text-5xl font-bold text-gray-900 mb-4 tracking-tight">
                Validate your idea before you build it.
            </h1>
            <p className="text-lg text-gray-600 mb-8">
                Why guess? Get an AI-driven demand forecast instantly.
            </p>

            <form onSubmit={handleSubmit} className="w-full flex flex-col gap-4">
                <div className="relative">
                    <textarea
                        ref={textareaRef}
                        value={userInput.idea}
                        onChange={handleInputChange}
                        onKeyDown={handleKeyDown}
                        placeholder="e.g. AI reading coach that sets your daily focus"
                        className={`w-full p-6 rounded-3xl bg-white border-2 text-gray-900 focus:ring-2 focus:border-transparent min-h-[120px] resize-none text-center text-lg transition-all duration-200 shadow-lg shadow-gray-200/50 ${
                            userInput.errorMessage 
                                ? 'border-red-300 focus:ring-red-500' 
                                : 'border-gray-200 focus:ring-indigo-500 hover:shadow-xl hover:shadow-gray-200/60'
                        }`}
                        rows={3}
                        disabled={isLoading}
                        aria-describedby={userInput.errorMessage ? "error-message" : undefined}
                    />
                    {userInput.errorMessage && (
                        <div id="error-message" className="text-red-500 text-sm mt-2 text-left">
                            {userInput.errorMessage}
                        </div>
                    )}
                </div>
                
                <button
                    type="submit"
                    disabled={isLoading || !userInput.isValid}
                    className="w-full flex justify-center items-center gap-3 font-semibold py-3 px-6 rounded-full text-white bg-gradient-to-r from-indigo-500 to-cyan-500 hover:opacity-90 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 text-lg"
                    aria-label={isLoading ? "Analyzing idea..." : "Validate this idea"}
                >
                    {isLoading ? (
                        <>
                            <LoadingSpinner />
                            Analyzing...
                        </>
                    ) : (
                        <>
                            <MagnifyingGlassIcon />
                            Validate This Idea
                        </>
                    )}
                </button>
            </form>

            <div className="mt-12 pt-8">
                <h3 className="text-md font-semibold text-gray-600 mb-5">
                    Not sure where to start? Try an example:
                </h3>
                <div className="flex flex-wrap justify-center gap-3">
                    {sampleIdeas.map((sample, index) => (
                        <button
                            key={index}
                            onClick={() => handleSampleIdeaClick(sample)}
                            disabled={isLoading}
                            className="border border-gray-300 bg-transparent text-gray-600 px-5 py-2 rounded-full text-sm font-medium hover:bg-gray-100 hover:border-gray-400 transition-colors duration-200 disabled:opacity-50"
                            aria-label={`Try example: ${sample}`}
                        >
                            {sample}
                        </button>
                    ))}
                </div>
            </div>
        </div>
    );
};

export default HomePage;
