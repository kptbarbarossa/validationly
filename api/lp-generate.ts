import type { VercelRequest, VercelResponse } from '@vercel/node';
import { kv } from '@vercel/kv';

function genId(): string {
	const rnd = Math.random().toString(36).slice(2, 8);
	return `${Date.now().toString(36)}${rnd}`;
}

function detectLang(text: string): 'tr'|'en' {
	return /[çğıöşüÇĞİÖŞÜ]/.test(text) ? 'tr' : 'en';
}

function buildHtml(params: { lpId: string; idea: string; headline: string; sub: string; bullets: string[]; lang: 'tr'|'en' }): string {
	const { lpId, idea, headline, sub, bullets, lang } = params;
	const title = lang === 'tr' ? 'Bekleme Listesi' : 'Join the Waitlist';
	const emailPh = lang === 'tr' ? 'E‑posta adresiniz' : 'Your email';
	const cta = lang === 'tr' ? 'Kaydol' : 'Sign up';
	const thanks = lang === 'tr' ? 'Kaydınız alındı. Teşekkürler!' : 'Thanks! You are on the list.';
	return `<!doctype html>
<html lang="${lang}">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>${headline}</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="min-h-screen bg-slate-950 text-slate-100">
  <main class="max-w-3xl mx-auto px-6 py-16">
    <h1 class="text-3xl md:text-5xl font-extrabold tracking-tight mb-4">${headline}</h1>
    <p class="text-lg text-slate-300 mb-8">${sub}</p>
    <ul class="mb-10 space-y-2">
      ${bullets.slice(0,4).map(b => `<li class="flex gap-2 items-start"><span class="text-indigo-400">•</span><span>${b}</span></li>`).join('')}
    </ul>
    <section class="bg-white/5 backdrop-blur rounded-2xl p-6 border border-white/10">
      <h2 class="text-xl font-semibold mb-3">${title}</h2>
      <form id="wl" class="flex flex-col sm:flex-row gap-3" onsubmit="return submitWL(event)">
        <input required type="email" name="email" placeholder="${emailPh}" class="flex-1 px-4 py-2 rounded-lg bg-white/10 border border-white/15 focus:outline-none focus:border-white/30" />
        <button class="px-5 py-2 rounded-lg bg-indigo-600 hover:bg-indigo-700 transition-colors">${cta}</button>
      </form>
      <p id="ok" class="hidden mt-3 text-sm text-green-300">${thanks}</p>
    </section>
    <p class="mt-6 text-xs text-slate-500">Generated by Validationly • Idea: ${idea.replace(/</g,'&lt;')}</p>
  </main>
  <script>
    async function submitWL(e){
      e.preventDefault();
      const form = e.target;
      const email = form.email.value.trim();
      if(!email) return false;
      try{
        const r = await fetch('/api/waitlist', {method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ lpId: '${lpId}', email })});
        const j = await r.json();
        if(j && j.ok){ document.getElementById('ok').classList.remove('hidden'); form.reset(); }
      }catch{}
      return false;
    }
  </script>
</body>
</html>`;
}

export default async function handler(req: VercelRequest, res: VercelResponse) {
	res.setHeader('Access-Control-Allow-Origin', '*');
	res.setHeader('Access-Control-Allow-Methods', 'POST,OPTIONS');
	res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
	if (req.method === 'OPTIONS') return res.status(200).end();
	if (req.method !== 'POST') return res.status(405).json({ ok: false, message: 'Method not allowed' });

	try {
		const { idea, headline, subheadline, bullets } = (req.body || {}) as { idea?: string; headline?: string; subheadline?: string; bullets?: string[] };
		const base = (idea || '').toString().slice(0, 300);
		if (!base) return res.status(400).json({ ok: false, message: 'idea required' });
		const lpId = genId();
		const lang = detectLang(base);
		const html = buildHtml({ lpId, idea: base, headline: (headline||base), sub: (subheadline||''), bullets: Array.isArray(bullets)? bullets : [], lang });
		try { await kv.set(`lp:${lpId}`, html, { ex: 60 * 60 * 24 * 30 }); } catch {}
		const proto = (req.headers['x-forwarded-proto'] as string) || 'https';
		const host = (req.headers['x-forwarded-host'] as string) || (req.headers.host as string) || 'validationly.com';
		const url = `${proto}://${host}/api/lp-render?id=${lpId}`;
		return res.status(200).json({ ok: true, id: lpId, url });
	} catch (e) {
		return res.status(500).json({ ok: false, message: 'lp generate error' });
	}
}


